1、引言
本文档介绍软件的设计流程及思路。

1.1、填写目的
方便开发者学习、理解、修改。

1.2、背景
项目名称:mybc
开发人员：王卓
运行：linux操作系统

1.3、参考资料
《Advanced Programming in the UNIX》
https://en.cppreference.com/w/

2、程序系统的组织结构

2.1、文件架构
包括：栈的实现文件、错误信息文件、检查字符类型文件和主文件。

2.2、文件设计说明
栈的实现文件：本程序使用堆栈实现四则运算和函数运算，因此需要定义自己所需要的栈文件。
错误信息文件：本程序要求较好的鲁棒性，因此需要专门的文件呈列错误信息。
检查字符输入文件：为了较早地发现错误输入，因此会在输入的一开始，检查输入，执行操作。

3、程序设计说明

3.1、程序描述
（1）程序从控制台执行,启动后显示一个命令提示符。例如:“->”。用户可以通过给特定的环境变量赋值来改变命令提示符的形式;
（2）支持实数的四则运算,例如:输入1+2-3*4/5回车后给出计算结果 0.6;
（3）可以通过某种手段指定运算结果的精度;
（4）可以使用圆括号改变运算的优先级;
（5）可使用双精度的数学常量 pi, e;
（6）支持数学函数 sin(), cos(), ln(), exp(), sqrt(), power(), fabs().

3.2、程序设计说明

3.2.1、“scale=x”与“cmd=x”命令的读取与执行：
程序忽略输入的空格，大小写敏感。当发现输入为"scale="，则判断等号后面的数据类型，如果是符合要求的int，则将程序的环境变量scale改变成对应的赋值，反之则报错。同样发现输入为"cmd="时，同理。

3.2.2、字符串的读取与处理
采取原则是将写入的字符串区分为字母、运算符号、数字三大类。当读入的是字母时，会将字母读当到底，并视为一个整体，如当输入为"cmd=2"时，程序会一口气读到"cmd="，然后判别等号后面的读数的数据类型，执行对应操作。当读入的是数字时，也是会将数字读到底，如“100”、“3.14”，中间会涉及到高数位的处理与小数点后数位的处理。当读入的是操作符时，将操作符设定特定的优先级，根据优先级不同来进行运算。

3.2.3、四则运算的实现
（1）设立两个堆栈，一个用来保存运算符，另一个用来保存数字。
（2）在表达式的首尾添加标记运算符，该运算符在程序中记为HEAD，该运算符优先级最低。
（3）从左至右依次遍历字符串，若遍历到运算符，则将其与运算符栈顶元素进行比较，若运算符栈栈顶运算符优先级小于该运算符或此时运算符栈顶元素为空，则将该运算符压入堆栈。遍历字符串中下一个元素。
（4）若运算符栈栈顶运算符优先级大于该运算符，则弹出该栈顶运算符，再从数字栈中依次弹出两个栈顶数字，完成弹出的运算符对应的运算得到结果后，再将该结果压入数字栈，重复比较此时栈顶运算符与当前遍历到的运算符优先级，视其优先级的大小重复步骤3或步骤4。
（5）若遍历到表达式中的数字，则直接压入数字栈。
（6）若运算符堆栈中仅存有两个运算符且栈顶元素为我们人为添加的标记运算符，那么表达式运算结束，此时数字堆栈中唯一的数字即为表达式的值。

3.2.4、括号优先级的实现
将括号视为操作运算符，将左括号视为最高优先级运算符，将右括号设为最低优先级运算符。因此当遍历到右括号时，会引起一系列的出栈运算操作，直到运算符栈的栈顶元素为最高优先级的左括号时，执行左括号的运算。在无函数时，左括号运算即为保存原有值。

3.2.5、常用函数的实现
构造一个函数栈，用以保存表达式中出现的函数运算。通过对连续字母的字符识别，将对应的字符所对用的函数标识压入函数堆栈。当表达式执行左符号运算时，函数栈出栈，对数字栈出栈的栈顶元素执行对应的函数操作，并将结果压入数字栈。此处处理思想来自于函数总会与括号相关联，因此通过设定的函数栈将函数的运算转移为左括号的运算。

3.2.6、多参数函数power(x,y)的实现
构造一个参数数组，用来保存任意函数的第一个参数后面的参数（不包括第一个参数）。具体方法是，将“，”视为一个操作运算符，他的优先级为仅次于左括号的高优先级。这样每次右括号运算到栈顶为逗号时，数字栈的栈顶元素为逗号右边的参数结果，如power(x,y)中的y。逗号运算符执行的操作则为，将栈顶元素取出存到参数数组中，实现对参数的保存，同时操作符栈中逗号元素出栈，此时读入的运算符仍为右括号，因此仍可进行四则运算得到上一个参数，以此类推可以得到所有参数，并保存在参数数组内。直到读数字栈顶为第一个参数，操作符栈栈顶为右括号时，执行右括号操作，根据所保存的参数，运算出函数结果。

3.2.7、pi、e等元素的赋值实现
从运算式中读出pi、e等元素，并用对应的值替换，即将对应的值压入数字栈。


